config {
  type: "incremental",
  bigquery: {
    partitionBy: "DATE(request_time)"
  },
  assertions: {
    uniqueKey: ["session_id", "position"],
    nonNull: ["session_id", "position"]
  },
  description: "Additional Transcript Transformations",
}

pre_operations {
  declare request_time_checkpoint default (
    ${when(incremental(),
    `select max(request_time) from ${self()}`,
    `select timestamp("2000-01-01")`)}
  );
}

WITH
  final_data AS (
    SELECT
      conversation.request_time,
      conversation.session_id,      
      conversation.agent_response,
      -- nullif(trim(buttons.message),'') as message,
      -- buttons.message_uuid,
      nullif(
          trim(
            replace(
              JSON_VALUE(session_parameters,'$.userAgentHeader'), 'Google-Dialogflow-', '')),
          '')
        as channel,
      CASE 
        WHEN conversation.optional_dtmf_digits IS NOT NULL 
          THEN IF(conversation.user_utterance like 'dtmf%','(dtmf) ' || conversation.user_utterance,'(dtmf) ' || optional_dtmf_digits)
        ELSE conversation.user_utterance END as consolidated_user_utterance,
      cast(match_type as string) as match_type,
      -- ARRAY_AGG(buttons.button_text IGNORE NULLS ORDER BY buttons.button_order) as buttons,
      conversation.project_id,
      conversation.position,
      conversation.intent_display_name,
      conversation.alternative_matched_intents,
      conversation.webhooks,
      conversation.session_parameters,
      conversation.execution_sequence
    FROM ${ref("dataform_conversation_metadata_fte")} AS conversation
    -- LEFT JOIN ais_ccai_eng.att_chat_message_buttons AS buttons
    --   ON
    --     conversation.session_id = buttons.session_id
    --     AND conversation.message_id = buttons.message_id
    WHERE TRUE 
      AND request_time > request_time_checkpoint
    -- GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9,11,12,13
  )
  , alt_intent_final as (
    select dt.session_id
      , dt.position
      , dt.intent_display_name
      , array_agg(struct(alternative_matched_intent as alternative_matched_intent, score as score)) as alternative_matched_intents
    from final_data as dt 
      ,UNNEST(dt.alternative_matched_intents) as alt_intent
    where TRUE
      AND intent_display_name <> alt_intent.alternative_matched_intent
    GROUP BY 1,2,3
  )
  , webhook_infobot_info as ( 
    SELECT 
      session_id,
      position,
      MAX(IF(lower((ARRAY_REVERSE(SPLIT(webhook_url, "/"))[OFFSET(0)]) ) LIKE '%infobot%', (ARRAY_REVERSE(SPLIT(webhook_url, "/"))[OFFSET(0)]) , NULL)) AS webhook
    FROM final_data
      ,UNNEST(webhooks) as webhook
    WHERE TRUE 
    GROUP BY 1,2
  )
  ,final_data_wip AS (
    SELECT DISTINCT
      src.request_time,
      src.project_id,
      session_id,
      position,
      agent_response,
      -- CASE
      --   WHEN src.message IS NULL AND uuid_response.message IS NULL THEN NULL
      --   ELSE
      --     trim(
      --       CONCAT(
      --         IFNULL(src.message, ''), '|', IFNULL(uuid_response.message, '')),
      --       '|')
      --   END AS message,
      -- message_uuid,
      consolidated_user_utterance,
      match_type,
      -- CASE
      --   WHEN buttons IS NULL AND uuid_response.button_labels IS NULL THEN NULL
      --   ELSE array_concat(IFNULL(buttons, []), IFNULL(uuid_response.button_labels, []))
      --   END AS buttons,
      -- case when uuid_response.CardList_labels is not null then 'Y' else null end as Is_CardList_labels,
      -- case when uuid_response.Card_labels is not null then 'Y' else null end as Is_Card_labels,
      -- case when uuid_response.Tip_labels is not null then 'Y' else null end as Is_Tip_labels,
      -- case when uuid_response.ChoiceList_labels is not null then 'Y' else null end as Is_ChoiceList_labels,
      -- case when uuid_response.Form_labels is not null then 'Y' else null end as Is_Form_labels,
      -- case when uuid_response.MultiForm_labels is not null then 'Y' else null end as Is_MultiForm_labels,
      -- case when uuid_response.Modal_labels is not null then 'Y' else null end as Is_Modal_labels,
      src.channel
    FROM final_data AS src
    -- LEFT JOIN att_chat_decode_uuid_response_temp AS uuid_response
      -- ON src.message_uuid = uuid_response.uuid and replace(replace(src.channel,'MWEB','WEB'),'undefined','WEB') = uuid_response.channel 
  ),
  get_session_param AS (
    SELECT 
      session_id
      ,position
      --SKIPPED ChatProductsOnID
      ,JSON_VALUE(session_parameters,'$.primary_phnumber') as PrimaryPhnNumber
      ,JSON_VALUE(session_parameters,'$.secondary_phnumber') as SecondaryPhnNumber
      ,JSON_VALUE(session_parameters,'$.new-number') as NewPhnNumber
      ,JSON_VALUE(session_parameters,'$.old-number') as OldPhnNumber
      --SKIPPED ChargeChangeList
      --SKIPPED PredictiveListOutput
      ,JSON_VALUE(session_parameters,'$.source_count') as source_count
      ,JSON_VALUE(session_parameters,'$.source_link') as source_link
      ,JSON_VALUE(session_parameters,'$.source_snippet') as source_snippet
      ,JSON_VALUE(session_parameters,'$.source_title') as source_title
      ,JSON_VALUE(session_parameters,'$.infobot_confidence') as infobot_confidence
      ,JSON_VALUE(session_parameters,'$.infobot_match') as infobot_match
      ,JSON_VALUE(session_parameters,'$.infobot_was_link_provided') as infobot_was_link_provided
      ,JSON_VALUE(session_parameters,'$.answer') as answer
      ,JSON_VALUE(session_parameters,'$.answer_count') as answer_count
    FROM final_data
  ),
  -- handling_session_param AS (
  --   SELECT DISTINCT session_id, position, buttons
  --   FROM final_data_wip AS ff, UNNEST(ff.buttons) AS f_buttons
  --   WHERE f_buttons LIKE '%$$session.params.%'
  -- ),
  -- handling_session_param_final AS (
  --   SELECT DISTINCT
  --     session_id, position, 1 AS session_param_ind, hsp_buttons
  --   FROM handling_session_param AS hsp, UNNEST(hsp.buttons) AS hsp_buttons
  --   WHERE hsp_buttons LIKE '%$$%'
  -- ),
  -- data_without_session_param AS (
  --   SELECT DISTINCT
  --     session_id, position, array_agg(trim(hsp_buttons)) AS hsp_buttons
  --   FROM handling_session_param AS hsp, UNNEST(hsp.buttons) AS hsp_buttons
  --   WHERE hsp_buttons NOT LIKE '%$$%'
  --   GROUP BY 1, 2
  -- ),
  -- denormalize_table AS (
  --   SELECT *
  --   FROM
  --     get_session_param
  --       UNPIVOT(
  --         session_param_value
  --           FOR
  --             session_param_field IN (
  --               ChatProductsOnID, PrimaryPhnNumber, SecondaryPhnNumber,
  --               NewPhnNumber, OldPhnNumber, ChargeChangeList,
  --               PredictiveListOutput))
  -- ),
  -- decoded_session_param AS (
  --   SELECT
  --     hspf.session_id,
  --     hspf.position,
  --     hspf.session_param_ind,
  --      array_agg(
  --       CASE
  --         WHEN hspf.hsp_buttons LIKE '%$$%'
  --           THEN
  --             unnested_session_param_value
  --         ELSE hspf.hsp_buttons
  --         END) AS buttons
  --   FROM handling_session_param_final AS hspf
  --   LEFT JOIN denormalize_table AS dt
  --     ON
  --       hspf.session_id = dt.session_id
  --       AND hspf.position = dt.position
  --       AND replace(replace(trim(hspf.hsp_buttons), '$$session.params.output.', ''), '$$session.params.',  '')  = dt.session_param_field
  --     , unnest(dt.session_param_value) as unnested_session_param_value
  --  GROUP BY 1, 2, 3
  -- ),
  final AS (
    SELECT
      master.request_time,
      master.project_id,
      master.session_id,
      master.position,
      master.agent_response,
      -- master.message,
      -- master.message_uuid,
      master.consolidated_user_utterance,
    -- CASE
    --     WHEN wip.session_param_ind = 1
    --       THEN
    --         array_concat(ifnull(final.hsp_buttons, []), ifnull(wip.buttons, []))
    --     ELSE array_concat(ifnull(master.buttons, []), ifnull(wip.buttons, []))
    --     END AS buttons,
      -- master.Is_CardList_labels,
      -- master.Is_Card_labels,
      -- master.Is_Tip_labels,
      -- master.Is_ChoiceList_labels,
      -- master.Is_Form_labels,
      -- master.Is_MultiForm_labels,
      -- master.Is_Modal_labels,
      master.channel,
      master.match_type
    FROM final_data_wip AS master
    -- LEFT JOIN data_without_session_param AS final
    --   ON
    --     master.session_id = final.session_id
    --     AND master.position = final.position
    -- LEFT JOIN decoded_session_param AS wip
    --   ON
    --     master.session_id = wip.session_id
    --     AND master.position = wip.position
  ), data_final as
  (    
  SELECT
  request_time,
  project_id,
  session_id,
  agent_response,
  position,
  -- message,
  -- message_uuid,
  consolidated_user_utterance,
  -- CASE WHEN ARRAY_LENGTH(buttons) = 0 THEN NULL ELSE buttons END AS buttons,
  -- Is_CardList_labels,
  -- Is_Card_labels,
  -- Is_Tip_labels,
  -- Is_ChoiceList_labels,
  -- Is_Form_labels,
  -- Is_MultiForm_labels,
  -- Is_Modal_labels
  channel,
  case when webhook_infobot_info.webhook IS NOT NULL then match_type || '_INFOBOT' else match_type end as match_type
FROM final
  LEFT JOIN webhook_infobot_info USING (session_id, position)
), get_consecutive_no_match as
(
SELECT
  session_id,
  position,
  case when match_type = 'NO_MATCH_INFOBOT' and lead(match_type) over(PARTITION by session_id order by session_id, position) = 'NO_MATCH_INFOBOT' then True else null end as consecutive_no_match
  from data_final
  where project_id like '%chat%'
)
,execution_steps_raw AS (
  SELECT 
    final_data.session_id
    ,final_data.position
    ,es.step
    ,es.flow_display_name
    ,TRIM(es.page_display_name) as page_display_name
    ,case when es.page_display_name = 'Live agent handoff' THEN NULL ELSE 
      JSON_VALUE(session_parameters_updated,'$.Event') END as event_updated
  FROM final_data
    ,UNNEST(execution_sequence) as es 
  WHERE 1=1
)
,execution_steps_event as (
  SELECT 
    session_id
    ,position
    ,flow_display_name
    ,page_display_name
    ,LAST_VALUE(event_updated IGNORE NULLS)
      OVER (PARTITION BY session_id, position ORDER BY step ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING )
      as event_updated
  FROM execution_steps_raw
  WHERE TRUE
    AND event_updated IS NOT NULL
  QUALIFY ROW_NUMBER() OVER (PARTITION BY session_id, position ORDER BY step DESC) = 1 --grab the last
)
,conv as (
  SELECT 
    session_id
    ,position
    ,JSON_VALUE(session_parameters,'$.Event') AS event
  FROM final_data
  WHERE TRUE
    -- AND project_id like '%voice%'
)
,event_parameters as (
SELECT 
  conv.session_id
  ,conv.position
  ,IF(event is null,null,LAST_VALUE(execution_steps_event.flow_display_name IGNORE NULLS) OVER (PARTITION BY conv.session_id ORDER BY conv.position ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )) as event_flow
  ,IF(event is null,null,LAST_VALUE(execution_steps_event.page_display_name IGNORE NULLS) OVER (PARTITION BY conv.session_id ORDER BY conv.position ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )) as event_page
  ,IF(event is null,null,LAST_VALUE(execution_steps_event.event_updated IGNORE NULLS) OVER (PARTITION BY conv.session_id ORDER BY conv.position ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )) as event
FROM conv
  LEFT OUTER JOIN execution_steps_event USING (session_id,position)
WHERE TRUE
)
SELECT 
  request_time
  , dt.session_id
  , dt.position
  -- , dt.buttons
  -- infobot agent response
  ,coalesce(dt.agent_response,'')  as consolidated_agent_response
  -- , case when coalesce(dt.message,'') = '$$session.params.answer<br><a href="$$session.params.source_link">$$session.params.source_title</a>' 
  --     then infobot_params.answer || ' [' || infobot_params.source_title || '](' || infobot_params.source_link || ')'
  --   else 
  --     coalesce(dt.agent_response,'') 
  --     || coalesce(dt.message,'') --|| coalesce(dt.message_uuid,'') 
  --     || coalesce(ARRAY_TO_STRING(dt.buttons,'--'),'') 
  --     || case when dt.Is_CardList_labels = 'Y' then '~Is Card List Available: Yes' else '' end 
  --     || case when dt.Is_Card_labels = 'Y' then '~Is Card Available: Yes' else '' end 
  --     || case when dt.Is_Tip_labels = 'Y' then '~Is Tip Available: Yes' else '' end 
  --     || case when dt.Is_ChoiceList_labels = 'Y' then '~Is Choice List Available: Yes' else '' end 
  --     || case when dt.Is_Form_labels = 'Y' then '~Is Form Available: Yes' else '' end 
  --     || case when dt.Is_MultiForm_labels = 'Y' then '~Is Multi Form Available: Yes' else '' end 
  --     || case when dt.Is_Modal_labels = 'Y' then '~Is Modal Available: Yes' else '' end   
  --   end as consolidated_agent_response
  -- , dt.message_uuid
  , dt.consolidated_user_utterance
  , ep.event_flow
  , ep.event_page
  , ep.event
  , dt.match_type
  , infobot_params.source_link
  , infobot_params.source_title
  , infobot_params.infobot_confidence
  , infobot_params.infobot_was_link_provided
  , infobot_params.infobot_match
  , consecutive_no_match
  , alt_intent_final.alternative_matched_intents
FROM data_final as dt 
  -- left join att_trans_steps as ats
  --   ON dt.session_id = ats.session_id
  --   AND dt.position = ats.position
  left join event_parameters as ep
    ON dt.session_id = ep.session_id
    AND dt.position = ep.position
  left join get_session_param as infobot_params
    ON dt.session_id = infobot_params.session_id
    AND dt.position = infobot_params.position
  left join get_consecutive_no_match
    ON dt.session_id = get_consecutive_no_match.session_id
    AND dt.position = get_consecutive_no_match.position
  left join alt_intent_final
    ON dt.session_id = alt_intent_final.session_id
    AND dt.position = alt_intent_final.position     
-- GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26