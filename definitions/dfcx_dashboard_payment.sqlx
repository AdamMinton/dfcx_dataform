config {
    type: "table",
    bigquery: {
        partitionBy: "DATE(session_start_time)"
    },
    description: "Payment - PAY_BILL Disposition",
}

  ######################################################
WITH
  base_interactions AS (
  SELECT
    interactions.session_id,
    session_start_time,
    interactions.interaction_position,
    interactions.start_interaction_position,
    interactions.end_interaction_position,
  IF
    (actions.action_ended,"SUCCEEDED",
    IF
      (actions.action_started,"FAILED","NO ATTEMPT")) AS Status,
    final_message.*,
    actions.action,
    actions.action_started_position,
    actions.action_ended_position,
    actions.action_started,
    actions.action_ended,
    actions.action_type,
    TO_JSON_STRING(execution_steps) AS str_execution_steps
  FROM
    ${ref("dfcx_interaction")} AS interactions
  LEFT JOIN
    UNNEST(actions) AS actions
  WHERE
    1=1
    AND interaction_head_intent = 'pmt_make_payment'
    AND actions.action = 'PAY_BILL' ),
  -----------------------------------------------
  -- Get some params from metadata_fte table --
  conv_sub_info AS (
  SELECT
    base_interactions.* EXCEPT (str_execution_steps),
    (CASE
        WHEN str_execution_steps LIKE '%DetermineNextRoute%' THEN TRUE
      ELSE
      FALSE
    END
      ) AS determine_next_route_flag,
    (CASE
        WHEN (str_execution_steps LIKE '%page_display_name%"Credit Balance"%'
        -- '%Zero Balance%'
        OR str_execution_steps LIKE '%page_display_name%"Zero Balance"%') THEN TRUE
      ELSE
      FALSE
    END
      ) AS credit_zero_balance_flag,
    JSON_VALUE(session_parameters,'$.Event') AS last_event,
    JSON_VALUE(session_parameters,'$.goal') AS last_goal,
    JSON_VALUE(session_parameters,'$.BillingSource') AS billing_source
  FROM
    base_interactions AS base_interactions
  INNER JOIN
    ${ref("dfcx_transcript")} AS conversation
  ON
    base_interactions.session_id = conversation.session_id
    AND base_interactions.end_interaction_position = conversation.position
  WHERE
    1=1 ),
  -- count all turns in make payment flow --
  conversation_turns AS (
  SELECT
    DISTINCT conversation.session_id,
    COUNT(conversation.position) AS turn_count
  FROM
    ${ref("dfcx_transcript")} AS conversation
  WHERE
    TRUE
    AND flow_display_name IN ('Make Payment',
      'Card Expiration Date')
    -- and flow_id in ('42e6f7a7-e2f1-44ed-8fb5-832c8c749d28', 'df0626a8-2880-4996-ade4-28ac51750ac2') --Make Payment and Card Expiration Date
  GROUP BY
    1 ),
  ------------------
  -- New Easy Pay--
  sub_easy_pay AS (
  SELECT
    DISTINCT base_interactions.session_id,
    conversation.intent_display_name,
    conversation.page_display_name,
  IF
    (conversation.intent_display_name IN ('confirmation.yes',
        'sup_pay_different_amount',
        'sup_pay_with_different_method',
        'sup_pay_total_amount',
        'sup_pay_specified_amount',
        'confirmation.yes_but_change_pmt_method',
        'acct_ci_different_account'), 1, 0) AS easy_pay_accepted_count
  FROM
    base_interactions AS base_interactions
  LEFT JOIN
    ${ref("dfcx_transcript")} AS conversation
  ON
    base_interactions.session_id = conversation.session_id
  WHERE
    1=1
    --AND DATE(conversation._PARTITION_DATE) BETWEEN PARSE_DATE('%F', $start_date) AND PARSE_DATE('%F', $end_date)  -- For Full Load
    --AND base_interactions.conversation_date BETWEEN PARSE_DATE('%F', $start_date) AND PARSE_DATE('%F', $end_date) -- For Full Load
    AND conversation.source_page_display_name = 'Easy Pay Offer' ),
  easy_pay AS (
  SELECT
    session_id,
    'Yes' AS easy_pay_offered_flag,
    CASE
      WHEN SUM(easy_pay_accepted_count) > 0 THEN 'Yes'
    ELSE
    'No'
  END
    AS easy_pay_accepted_flag
  FROM
    sub_easy_pay
  GROUP BY
    1,
    2 )
  -----------------------------------------------
  -- Final Query --
SELECT
  base_interactions.session_start_time,
  base_interactions.session_id,
  base_interactions.status,
  base_interactions.match_type,
  base_interactions.source_page_display_name,
  base_interactions.source_flow_display_name,
  base_interactions.flow_display_name,
  base_interactions.page_display_name,
  base_interactions.intent_display_name,
  GetBreakDown_L1(base_interactions.Status,
    last_event,
    last_goal,
    base_interactions.flow_display_name,
    base_interactions.page_display_name,
    base_interactions.determine_next_route_flag,
    base_interactions.credit_zero_balance_flag) AS status_breakdown_1,
  GetBreakDown_L2(base_interactions.Status,
    last_event,
    last_goal,
    base_interactions.flow_display_name,
    base_interactions.page_display_name,
    base_interactions.determine_next_route_flag,
    base_interactions.credit_zero_balance_flag) AS status_breakdown_2,
  last_event,
  last_goal,
  billing_source,
  final_language_code,
  heuristic_outcome.heuristic_outcome AS improved_nsm_heuristic_outcome,
  att_conversation.att_call_id,
  att_conversation.is_call_recorded,
  '[' || base_interactions.session_id || '](' || links.cobweb_url || '&authuser=' || '1' || ')' AS cobweb_url,
  CONCAT( '[TE](', 'https://data.corp.google.com/sites/epgvfa2lqeur/att_transcript_explorer/?', 'f=conversation_create_date:eq:', CAST(UNIX_MILLIS(TIMESTAMP(base_interactions.session_start_time)) AS STRING), '&f=session_id:eq:', base_interactions.session_id, ')') AS te_url,
  IFNULL(easy_pay.easy_pay_offered_flag, 'No') AS easy_pay_offered_flag,
  IFNULL(easy_pay.easy_pay_accepted_flag, 'No') AS easy_pay_accepted_flag,
  CASE
    WHEN IFNULL(easy_pay.easy_pay_offered_flag, 'No') != 'Yes' THEN 'easy_pay_no_offer'
    WHEN easy_pay.easy_pay_accepted_flag != 'Yes' THEN 'easy_pay_rejected'
    WHEN easy_pay.easy_pay_accepted_flag ='Yes' THEN 'easy_pay_accepted'
  ELSE
  'na'
END
  AS easy_pay_type,
  conversation_turns.turn_count
FROM
  conv_sub_info AS base_interactions
LEFT OUTER JOIN (
  SELECT
    *
  FROM
    ${ref("dfcx_session_common_lookups")}) AS links
ON
  base_interactions.session_id = links.session_id
LEFT OUTER JOIN (
  SELECT
    *
  FROM
    ${ref("dfcx_session_heuristic_outcome")}) AS heuristic_outcome
ON
  base_interactions.session_id = heuristic_outcome.session_id
LEFT OUTER JOIN (
  SELECT
    *
  FROM
    ${ref("dfcx_session_metadata")}) AS att_conversation
ON
  base_interactions.session_id = att_conversation.session_id
LEFT OUTER JOIN
  easy_pay AS easy_pay
ON
  base_interactions.session_id = easy_pay.session_id
LEFT OUTER JOIN
  conversation_turns AS conversation_turns
ON
  base_interactions.session_id = conversation_turns.session_id
WHERE
  1=1

pre_operations {
  -- Functions --
    ----------------
    -- BreakDown 1 --
  CREATE TEMP FUNCTION
    GetBreakDown_L1(status STRING,
      last_event STRING,
      last_goal STRING,
      flow_name STRING,
      last_page STRING,
      determine_next_route_flag BOOL,
      credit_zero_balance_flag BOOL)
    RETURNS STRING AS (
      CASE
        WHEN status = 'SUCCEEDED' AND last_event = 'Success' THEN 'Successfully Finishing Self-Service'
        WHEN status = 'SUCCEEDED'
      AND (LOWER(last_event) = 'hangup'
        OR LOWER(last_event) LIKE '%agent%') THEN 'Successfully Finishing SS HangUp/Agent'
        WHEN status = 'NO ATTEMPT' AND (determine_next_route_flag IS TRUE OR last_goal = 'DetermineNextRoute' OR last_event = 'DetermineNextRoute') AND flow_name = 'Make Payment' THEN 'Not Starting Self-Service'
        WHEN status = 'NO ATTEMPT'
      AND (determine_next_route_flag IS TRUE
        OR last_goal = 'DetermineNextRoute'
        OR last_event = 'DetermineNextRoute')
      AND flow_name != 'Make Payment' THEN 'Not Starting Flow'
        WHEN status = 'NO ATTEMPT' AND IFNULL(last_goal, 'null') = 'null' AND (IFNULL(last_event, 'null') = 'null' OR last_event = 'HangUp') AND flow_name = 'Steering' AND last_page = 'POC: NextIntent' THEN 'Not Starting Flow'
        WHEN status = 'FAILED'
      AND (LOWER(last_event) = 'hangup'
        OR LOWER(last_event) LIKE '%agent%') THEN 'Not Finishing Self-Service (HangUp/Agent)'
      ELSE
      CONCAT(INITCAP(status), ' (Others)')
    END
      );
    -- BreakDown 2 --
  CREATE TEMP FUNCTION
    GetBreakDown_L2(status STRING,
      last_event STRING,
      last_goal STRING,
      flow_name STRING,
      last_page STRING,
      determine_next_route_flag BOOL,
      credit_zero_balance_flag BOOL)
    RETURNS STRING AS (
      CASE
        WHEN status = 'SUCCEEDED' AND last_event = 'Success' THEN 'Successfully Finishing Self-Service'
        WHEN status = 'SUCCEEDED'
      AND LOWER(last_event) = 'hangup' THEN 'HangUp'
        WHEN status = 'SUCCEEDED' AND LOWER(last_event) LIKE '%agent%' THEN 'Agent'
        WHEN status = 'NO ATTEMPT'
      AND (determine_next_route_flag IS TRUE
        OR last_goal = 'DetermineNextRoute'
        OR last_event = 'DetermineNextRoute') THEN 'Screening Out'
        WHEN status = 'NO ATTEMPT' AND credit_zero_balance_flag THEN 'Credit or Zero Balance'
        WHEN status = 'NO ATTEMPT'
      AND IFNULL(last_goal, 'null') = 'null'
      AND (IFNULL(last_event, 'null') = 'null'
        OR last_event = 'HangUp')
      AND flow_name = 'Steering'
      AND last_page = 'POC: NextIntent' THEN 'Screening Out'
        WHEN status = 'FAILED' AND LOWER(last_event) = 'hangup' THEN 'HangUp'
        WHEN status = 'FAILED'
      AND LOWER(last_event) LIKE '%agent%' THEN 'Agent'
      ELSE
      CONCAT(INITCAP(status), ' (Others)')
    END
      );
}
