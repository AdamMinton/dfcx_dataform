config {
    type: "table",
    bigquery: {
        partitionBy: "DATE(session_start_time)"
    },
    description: "Payment - PAYMENT_ARRANGEMENT Disposition",
}

WITH
  base_interactions AS (
  SELECT
    interactions.session_id,
    interactions.session_start_time,
    interactions.interaction_position,
    interactions.start_interaction_position,
    interactions.end_interaction_position,
  IF
    (actions.action_ended,"SUCCEEDED",
    IF
      (actions.action_started,"FAILED","NO ATTEMPT")) AS Status,
    final_message.*,
    actions.action,
    actions.action_started_position,
    actions.action_ended_position,
    actions.action_started,
    actions.action_ended,
    actions.action_type,
    TO_JSON_STRING(execution_steps) AS str_execution_steps
  FROM
    ${ref("dfcx_interaction")} AS interactions
  LEFT JOIN
    UNNEST(actions) AS actions
  WHERE
    1=1
    AND interaction_head_intent = 'pmt_make_arrangement'
    AND actions.action IN ('PAYMENT_ARRANGEMENT',
      'PMT_MAKE_ARRANGEMENT',
      'PMT_MODIFY_ARRANGEMENT') ),
  -----------------------------------------------
  -- Get some params from metadata_fte table --
  conv_sub_info AS (
  SELECT
    base_interactions.* EXCEPT (str_execution_steps),
    (CASE
        WHEN str_execution_steps LIKE '%DetermineNextRoute%' THEN TRUE
      ELSE
      FALSE
    END
      ) AS determine_next_route_flag,
    JSON_VALUE(session_parameters,'$.Event') AS last_event,
    JSON_VALUE(session_parameters,'$.goal') AS last_goal,
    JSON_VALUE(session_parameters,'$.BillingSource') AS billing_source,
  FROM
    base_interactions AS base_interactions
  INNER JOIN
    ${ref("dfcx_transcript")} AS conversation
  ON
    base_interactions.session_id = conversation.session_id
    AND base_interactions.end_interaction_position = conversation.position
  WHERE
    1=1 )
  -----------------------------------------------
  -- Final Query --
SELECT
  base_interactions.session_start_time,
  base_interactions.session_id,
  base_interactions.status,
  base_interactions.match_type,
  base_interactions.source_page_display_name,
  base_interactions.source_flow_display_name,
  base_interactions.flow_display_name,
  base_interactions.page_display_name,
  base_interactions.intent_display_name,
  GetBreakDown_L1(base_interactions.Status,
    last_event,
    last_goal,
    base_interactions.flow_display_name,
    base_interactions.page_display_name,
    base_interactions.determine_next_route_flag) AS status_breakdown_1,
  GetBreakDown_L2(base_interactions.Status,
    last_event,
    last_goal,
    base_interactions.flow_display_name,
    base_interactions.page_display_name,
    base_interactions.determine_next_route_flag) AS status_breakdown_2,
  last_event,
  last_goal,
  billing_source,
  final_language_code,
  heuristic_outcome.heuristic_outcome AS improved_nsm_heuristic_outcome,
  att_conversation.att_call_id,
  att_conversation.is_call_recorded,
FROM
  conv_sub_info AS base_interactions
LEFT OUTER JOIN (
  SELECT
    *
  FROM
    ${ref("dfcx_session_heuristic_outcome")}) AS heuristic_outcome
ON
  base_interactions.session_id = heuristic_outcome.session_id
LEFT OUTER JOIN (
  SELECT
    *
  FROM
    ${ref("dfcx_session_metadata")}) AS att_conversation
ON
  base_interactions.session_id = att_conversation.session_id
WHERE
  1=1

pre_operations {
  ----------------------------------------------------------------
    -- Functions --
    ----------------
    -- BreakDown 1 --
  CREATE TEMP FUNCTION
    GetBreakDown_L1(status STRING,
      last_event STRING,
      last_goal STRING,
      flow_name STRING,
      last_page STRING,
      determine_next_route_flag BOOL)
    RETURNS STRING AS (
      CASE
        WHEN status = 'SUCCEEDED' AND last_event = 'Success' THEN 'Successfully Finishing Self-Service'
        WHEN status = 'SUCCEEDED'
      AND (LOWER(last_event) = 'hangup'
        OR LOWER(last_event) LIKE '%agent%') THEN 'Successfully Finishing SS HangUp/Agent'
        WHEN status = 'NO ATTEMPT' AND (determine_next_route_flag IS TRUE OR last_goal = 'DetermineNextRoute' OR last_event = 'DetermineNextRoute') AND flow_name = 'Payment Arrangement' THEN 'Not Starting Self-Service'
        WHEN status = 'NO ATTEMPT'
      AND (determine_next_route_flag IS TRUE
        OR last_goal = 'DetermineNextRoute'
        OR last_event = 'DetermineNextRoute')
      AND flow_name != 'Payment Arrangement' THEN 'Not Starting Flow'
        WHEN status = 'NO ATTEMPT' AND IFNULL(last_goal, 'null') = 'null' AND (IFNULL(last_event, 'null') = 'null' OR last_event = 'HangUp') AND flow_name = 'Steering' AND last_page = 'POC: NextIntent' THEN 'Not Starting Flow'
        WHEN status = 'FAILED'
      AND (LOWER(last_event) = 'hangup'
        OR LOWER(last_event) LIKE '%agent%') THEN 'Not Finishing Self-Service (HangUp/Agent)'
      ELSE
      CONCAT(INITCAP(status), ' (Others)')
    END
      );
    -- BreakDown 2 --
  CREATE TEMP FUNCTION
    GetBreakDown_L2(status STRING,
      last_event STRING,
      last_goal STRING,
      flow_name STRING,
      last_page STRING,
      determine_next_route_flag BOOL)
    RETURNS STRING AS (
      CASE
        WHEN status = 'SUCCEEDED' AND last_event = 'Success' THEN 'Successfully Finishing Self-Service'
        WHEN status = 'SUCCEEDED'
      AND LOWER(last_event) = 'hangup' THEN 'HangUp'
        WHEN status = 'SUCCEEDED' AND LOWER(last_event) LIKE '%agent%' THEN 'Agent'
        WHEN status = 'NO ATTEMPT'
      AND (determine_next_route_flag IS TRUE
        OR last_goal = 'DetermineNextRoute'
        OR last_event = 'DetermineNextRoute') THEN 'Screening Out'
      --when status = 'NO ATTEMPT' and  credit_zero_balance_flag then 'Credit or Zero Balance'
        WHEN status = 'NO ATTEMPT' AND IFNULL(last_goal, 'null') = 'null' AND (IFNULL(last_event, 'null') = 'null' OR last_event = 'HangUp') AND flow_name = 'Steering' AND last_page = 'POC: NextIntent' THEN 'Screening Out'
      -- new --
        WHEN status = 'NO ATTEMPT'
      AND last_page IN('Schedule Payment Eligible',
        'Instant Payment') THEN 'Payment already exists'
        WHEN status = 'NO ATTEMPT' AND last_page = 'schedule payment not eligible' THEN 'Not Eligible for PA'
        WHEN status = 'NO ATTEMPT'
      AND last_page = 'Confirm Immediate Payment' THEN 'Minimum payment required'
      -- new --
        WHEN status = 'FAILED' AND LOWER(last_event) = 'hangup' THEN 'HangUp'
        WHEN status = 'FAILED'
      AND LOWER(last_event) LIKE '%agent%' THEN 'Agent'
      -- new --
        WHEN status = 'FAILED' AND last_event = 'NoInputMax' THEN 'NoInputMax'
        WHEN status = 'FAILED'
      AND last_event = 'NoMatchMax' THEN 'NoMatchMax'
      -- new --
      ELSE
      CONCAT(INITCAP(status), ' (Others)')
    END
      );
}
