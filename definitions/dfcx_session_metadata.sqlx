config {
    type: "incremental",
    bigquery: {
      partitionBy: "TIMESTAMP_TRUNC(session_start_time, HOUR)",
      updatePartitionFilter: "session_start_time >= TIMESTAMP_SUB(session_start_time_checkpoint, INTERVAL 1 HOUR)",
      requirePartitionFilter : true
    },
    uniqueKey: ["session_id"],
    description: "DFCX session summary information",
}

WITH
  dfcx_transcript AS (
  SELECT
    session_id,
    project_id,
    agent_id,
    location,
    session_start_time,
    request_time,
    language_code,
    position,
    insert_time
  FROM
    ${ref("dfcx_transcript")} AS dfcx_transcript
  WHERE TRUE
    AND dfcx_transcript.session_start_time >= session_start_time_checkpoint
  ),
  session_info as (
    SELECT 
      session_id,
      project_id,
      agent_id,
      location,
      session_start_time,
      MAX(request_time) as session_end_time,
      COUNT(*) AS number_of_turns,
      MAX(position) as exit_position,
      MAX(insert_time) as latest_insert_time
    FROM dfcx_transcript
    GROUP BY 1,2,3,4,5
  ),
  language_code AS (
  SELECT session_id, MAX(final_language_code) as final_language_code
  FROM (
  SELECT 
    session_id,
    LAST_VALUE(language_code) OVER (PARTITION BY session_id ORDER BY position ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS final_language_code
  FROM dfcx_transcript
  )
  WHERE TRUE
  GROUP BY 1
  ),
  dfcx_interaction AS (
  SELECT
    session_id,
    interaction_position,
    interaction_position_reverse,
    interaction_head_intent,
    start_interaction_position,
    end_interaction_position,
    (SELECT MAX(action_started) FROM UNNEST(actions) WHERE primary_action = TRUE) AS any_started_action,
    LAG(interaction_head_intent,1) OVER (PARTITION BY session_id ORDER BY interaction_position ASC) AS lag_01_interaction_head_intent,
    IF(LAG(interaction_head_intent,1) OVER (PARTITION BY session_id ORDER BY interaction_position ASC) = interaction_head_intent, FALSE, TRUE) AS change_from_previous_head_intent,
    final_message,
    actions
  FROM
    ${ref("dfcx_interaction")} as dfcx_interaction
  WHERE TRUE
    AND dfcx_interaction.session_start_time >= session_start_time_checkpoint
  ),
  removing_non_unique AS (
  SELECT
    session_id,
    interaction_position,
    interaction_head_intent,
    actions.*,
    ROW_NUMBER() OVER (PARTITION BY session_id ORDER BY primary_action DESC
      --primary actions first
      , interaction_position DESC
      --latest interaction first
      , action_started DESC
      --latest action started
      ) AS ranking
  FROM
    dfcx_interaction,
    UNNEST(actions) AS actions
  WHERE
    any_started_action = TRUE
    AND change_from_previous_head_intent = TRUE ),
  finding_not_started AS (
  SELECT
    session_id,
    interaction_position,
    interaction_head_intent,
    actions.*,
    ROW_NUMBER() OVER (PARTITION BY session_id ORDER BY primary_action DESC
      --primary actions first
      , interaction_position DESC
      --latest interaction first
      , action_started DESC
      --latest action started
      ) AS ranking
  FROM
    dfcx_interaction,
    UNNEST(actions) AS actions
  WHERE
    session_id NOT IN (
    SELECT
      session_id
    FROM
      removing_non_unique) ),
  final_message AS (
  SELECT
    session_id,
    final_message
  FROM dfcx_interaction
  WHERE
    interaction_position_reverse = 1 ),
  union_actions AS (
  SELECT
    session_id,
    COALESCE(interaction_head_intent,'Unidentified') AS final_interaction_head_intent,
    action,
    action_started,
    action_started_position,
    action_ended,
    action_ended_position,
    primary_flow
  FROM
    removing_non_unique
  WHERE
    ranking = 1
  UNION ALL
  SELECT
    session_id,
    COALESCE(interaction_head_intent,'Unidentified') AS final_interaction_head_intent,
    'NO SELF SERVICE' AS action,
    action_started,
    action_started_position,
    action_ended,
    action_ended_position,
    'Steering' AS primary_flow
  FROM
    finding_not_started
  WHERE
    ranking = 1 )
SELECT
  session_info.session_start_time,
  session_info.session_id,
  session_info.project_id,
  session_info.agent_id,
  session_info.location,
  session_info.session_end_time,
  final_message.final_message,
  union_actions.final_interaction_head_intent,
  union_actions.action AS final_action,
  union_actions.action_started AS final_action_started,
  union_actions.action_ended AS final_action_ended,
  union_actions.primary_flow AS final_action_primary_flow,
  session_info.number_of_turns,
  COALESCE(language_code.final_language_code,'en-us') AS final_language_code,
  session_info.latest_insert_time
FROM session_info
LEFT JOIN final_message USING (session_id)
LEFT JOIN union_actions USING (session_id)
LEFT JOIN language_code USING (session_id)

pre_operations {
  DECLARE
    insert_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MAX(latest_insert_time),CURRENT_TIMESTAMP()) FROM ${self()} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR)`,
            `SELECT TIMESTAMP(${dataform.projectConfig.vars.backfillDate})`)
    }
    );
  DECLARE 
    session_start_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MIN(session_start_time),CURRENT_TIMESTAMP()) FROM ${ref("dfcx_transcript")} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 36 HOUR) AND insert_time > insert_time_checkpoint`,
            `SELECT TIMESTAMP(${dataform.projectConfig.vars.backfillDate})`)
    }
    )
}
