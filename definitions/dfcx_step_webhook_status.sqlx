config {
    type: "incremental",
    bigquery: {
        partitionBy: "TIMESTAMP_TRUNC(session_start_time, DAY)",
        requirePartitionFilter : true
    },
    description: "Contains the status of the webhook if it soft failed",
    columns: {
      session_start_time: "The time at which a session starts",
      session_id: "The fully qualified unique ID for the session",
      response_id: "The unique ID associated with the response from the agent",
      request_time: "The time of the conversational turn",
      insert_time: "The UTC timestamp of when the record was inserted to the source table",
      step: "Refers to a single action or processing unit that occurs during a conversation turn",
      status: "The status value extracted from the session parameters updated by the webhook",
      status_did_pass: "Boolean indicator if the status suggests a pass (TRUE), fail (FALSE), or is undetermined (NULL)",
      did_row_pass: "Final boolean flag indicating if the row represents a successful webhook status (TRUE) or a soft failure (FALSE)"
    }
}

pre_operations {
  DECLARE
    insert_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MAX(insert_time),CURRENT_TIMESTAMP()) FROM ${self()} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL ${dataform.projectConfig.vars.checkpointSeconds} SECOND)`,
            `SELECT ${dataform.projectConfig.vars.backfillTimestamp}`)
    }
    );
  DECLARE
    session_start_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MIN(session_start_time),CURRENT_TIMESTAMP()) FROM ${ref("dfcx_transcript")} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL ${dataform.projectConfig.vars.checkpointSeconds} SECOND) AND insert_time > insert_time_checkpoint`,
            `SELECT ${dataform.projectConfig.vars.backfillTimestamp}`)
    }
    );

  ${
    when(incremental(),
      `MERGE ${self()} AS t
      USING (
          SELECT *
          FROM ${ref("dfcx_transcript_position")}
          WHERE insert_time >= insert_time_checkpoint
        ) AS s
      ON t.session_id = s.session_id
      AND t.insert_time = s.insert_time
      AND t.session_start_time >= session_start_time_checkpoint
      WHEN MATCHED THEN
      UPDATE SET
        t.session_start_time = s.session_start_time;`,
        ``
    )
  }

}

WITH
  extract_status_values AS (
  SELECT
      session_start_time
    , session_id
    , response_id
    , request_time
    , insert_time
    , step
    , JSON_VALUE(session_parameters_updated,'$.status') AS status
  FROM ${ref("dfcx_transcript")} AS dfcx_transcript
    INNER JOIN UNNEST(dfcx_transcript.webhooks) AS webhook
  WHERE TRUE
    AND insert_time > insert_time_checkpoint
    AND session_start_time >= session_start_time_checkpoint
)
, determine_success AS (
  SELECT
      *
    , CASE
      WHEN REGEXP_CONTAINS(LOWER(status),r'failure|false') THEN FALSE
      WHEN status IS NOT NULL THEN TRUE
      ELSE NULL END AS status_did_pass
  FROM extract_status_values
  WHERE TRUE
)
, final_flag AS (
  SELECT
      *
    , CASE
      WHEN status_did_pass = FALSE THEN FALSE ELSE TRUE END as did_row_pass
  FROM
    determine_success
  WHERE TRUE
)
SELECT
    *
FROM final_flag