config {

  type: "incremental",
  bigquery: {
    partitionBy: "DATE(session_start_time)"
  },
  assertions: {
    uniqueKey: ["session_id", "position"],
    nonNull: ["session_id", "position"]
  },
  description: "Main reporting table for DFCX conversations",
}

pre_operations {
  declare request_time_checkpoint default (
    ${when(incremental(),
    `select max(request_time) from ${self()}`,
    `select timestamp("2000-01-01")`)}
  );
}

WITH 
base_data AS (
  SELECT  
    dfcx.project_id as project_id
    ,SPLIT(dfcx.conversation_name,'/')[SAFE_OFFSET(3)] as location
    ,dfcx.agent_id as agent_id
    ,ARRAY_REVERSE(SPLIT(dfcx.conversation_name,'/'))[SAFE_OFFSET(0)] as session_id
    ,JSON_VALUE(dfcx.response,'$.responseId') as response_id
    ,dfcx.request_time as request_time
    ,ROW_NUMBER() OVER (PARTITION BY ARRAY_REVERSE(SPLIT(dfcx.conversation_name,'/'))[SAFE_OFFSET(0)] ORDER BY request_time ASC) as position
    ,JSON_VALUE(dfcx.request,'$.queryInput.text.text') as user_utterance
    ,JSON_VALUE(dfcx.request,'$.queryInput.dtmf.digits') as optional_dtmf_digits
    ,ARRAY_REVERSE(SPLIT(JSON_VALUE(dfcx.response,'$.queryResult.intent.name'),'/'))[SAFE_OFFSET(0)] as intent_display_id
    ,JSON_VALUE(dfcx.response,'$.queryResult.intent.displayName') as intent_display_name
    ,JSON_VALUE(dfcx.response,'$.queryResult.match.matchType') as match_type
    ,JSON_VALUE(dfcx.response,'$.queryResult.match.confidence') as intent_confidence_score
    ,TO_JSON(COALESCE(JSON_QUERY(dfcx.response,'$.queryResult.parameters'),JSON_OBJECT())) as session_parameters
    ,JSON_QUERY_ARRAY(dfcx.response,'$.queryResult.diagnosticInfo.Execution Sequence') as execution_sequence
    ,dfcx.language_code
    ,JSON_VALUE(dfcx.request,'$.queryInput.event.event') as event
    ,JSON_QUERY_ARRAY(dfcx.response,'$.queryResult.responseMessages') as response_messages
    ,IF(JSON_VALUE(conversation_signals,'$.turnSignals.agentEscalated')='true',TRUE,FALSE) as live_agent_handoff
    ,JSON_QUERY_ARRAY(dfcx.response,'$.queryResult.diagnosticInfo.Alternative Matched Intents') as alternative_matched_intents
  FROM `${dataform.projectConfig.defaultDatabase}.${dataform.projectConfig.vars.dialogflowExport}` as dfcx
  WHERE TRUE
    AND request_time > request_time_checkpoint
  QUALIFY ROW_NUMBER() OVER (PARTITION BY session_id, response_id ORDER BY request_time DESC) = 1
)
,execution_sequence as (
  SELECT 
    step + 1 as step
    ,session_id
    ,position
    ,REGEXP_REPLACE(REGEXP_REPLACE(TO_JSON_STRING(execution_sequence),r'Step \d+','Step X')
      ,r'SessionParameters\(Updated\)','SessionParameters') as execution_sequence_step
    FROM base_data
      LEFT JOIN UNNEST(base_data.execution_sequence) as execution_sequence with OFFSET as step
  WHERE 1=1
)
,execution_sequence_parse as (
  SELECT
    session_id
    ,position
    ,step
    ,JSON_VALUE(execution_sequence_step,'$.Step X.InitialState.FlowState.FlowId') as flow_id_initial_state
    ,JSON_VALUE(execution_sequence_step,'$.Step X.InitialState.FlowState.Name') as flow_display_name_initial_state
    ,JSON_VALUE(execution_sequence_step,'$.Step X.InitialState.FlowState.PageState.PageId') as page_id_initial_state
    ,JSON_VALUE(execution_sequence_step,'$.Step X.InitialState.FlowState.PageState.Name') as page_display_name_initial_state
    ,JSON_VALUE(execution_sequence_step,'$.Step X.InitialState.FlowState.PageState.Status') as status_initial_state
    ,JSON_QUERY(execution_sequence_step,'$.Step X.InitialState.SessionParameters') as session_parameters_initial
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.FlowState.FlowId') as flow_id
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.FlowState.Name') as flow_display_name
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.FlowState.PageState.PageId') as page_id
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.FlowState.PageState.Name') as page_display_name
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.FlowState.PageState.Status') as status
    ,JSON_QUERY(execution_sequence_step,'$.Step X.FunctionExecution.SessionParameters') as session_parameters_updated
    ,JSON_QUERY(execution_sequence_step,'$.Step X.FunctionExecution.SystemFunctionResults') as system_function_results
    ,JSON_QUERY_ARRAY(execution_sequence_step,'$.Step X.FunctionExecution.Responses') as responses
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.TriggeredTransitionRouteId') as triggered_transition_route_id
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.TriggeredIntent') as triggered_intent
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.TriggeredCondition') as triggered_condition
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.TargetFlow') as target_flow_id
    ,JSON_VALUE(execution_sequence_step,'$.Step X.StateMachine.TargetPage') as target_page_id
    ,JSON_VALUE(execution_sequence_step,'$.Step X.FunctionExecution.Webhook.ID') as webhook_id
    ,JSON_VALUE(execution_sequence_step,'$.Step X.FunctionExecution.Webhook.DisplayName') as webhook_display_name
    ,JSON_VALUE(execution_sequence_step,'$.Step X.FunctionExecution.Webhook.Latency') as webhook_latency
    ,CAST(REGEXP_EXTRACT(JSON_VALUE(execution_sequence_step,'$.Step X.FunctionExecution.Webhook.Latency')
      ,r'(\d+)') as INT64) as webhook_latency_ms
    ,JSON_VALUE(execution_sequence_step,'$.Step X.FunctionExecution.Webhook.Status') as webhook_status
    ,JSON_VALUE(execution_sequence_step,'$.Step X.FunctionExecution.Webhook.URL') as webhook_url
  FROM execution_sequence as es
)
,execution_sequence_agg AS (
  SELECT 
    session_id
    ,position
    ,MAX((SELECT MAX(IF(JSON_QUERY(response,'$.liveAgentHandoff') IS NOT NULL, TRUE, FALSE)) FROM UNNEST(responses) as response)) as live_agent_escalation
    ,COUNT(*) as execution_sequence_count
    ,ARRAY_AGG(STRUCT(
      step
      ,COALESCE(flow_id_initial_state,flow_id) as flow_id
      ,COALESCE(flow_display_name_initial_state,flow_display_name) as flow_display_name
      ,COALESCE(page_id_initial_state,page_id) as page_id
      ,COALESCE(page_display_name_initial_state,page_display_name) as page_display_name
      ,COALESCE(status_initial_state,status) as status
      ,session_parameters_initial
      ,session_parameters_updated
      ,system_function_results
      ,responses
      ,triggered_transition_route_id
      ,triggered_intent
      ,triggered_condition
      ,target_flow_id
      ,target_page_id
    ) ORDER BY step ASC) as execution_sequence
  FROM execution_sequence_parse
  GROUP BY 1,2
)
,webhook_agg AS (
  SELECT 
    session_id
    ,position
    ,ARRAY_AGG(STRUCT(
      step
      ,flow_id
      ,flow_display_name
      ,page_id
      ,page_display_name
      ,webhook_id
      ,webhook_display_name
      ,webhook_latency_ms
      ,webhook_status
      ,webhook_url
      ,session_parameters_updated
    ) ORDER BY step ASC) as webhooks
  FROM execution_sequence_parse
  WHERE webhook_id is not null
  GROUP BY 1,2
)
,source_and_target_page AS (
  SELECT 
    session_id
    ,position
    ,execution_sequence[SAFE_OFFSET(0)].flow_id as source_flow_id
    ,execution_sequence[SAFE_OFFSET(0)].flow_display_name as source_flow_display_name
    ,execution_sequence[SAFE_OFFSET(0)].page_id as source_page_id
    ,execution_sequence[SAFE_OFFSET(0)].page_display_name as source_page_display_name
    ,execution_sequence[SAFE_OFFSET(ARRAY_LENGTH(execution_sequence)-1)].flow_id
    ,execution_sequence[SAFE_OFFSET(ARRAY_LENGTH(execution_sequence)-1)].flow_display_name
    ,execution_sequence[SAFE_OFFSET(ARRAY_LENGTH(execution_sequence)-1)].page_id
    ,execution_sequence[SAFE_OFFSET(ARRAY_LENGTH(execution_sequence)-1)].page_display_name
  FROM execution_sequence_agg
)
,session as (
  SELECT 
    session_id
    ,MIN(request_time) as session_start_time
    ,MAX(request_time) as session_end_time
  FROM base_data
  GROUP BY 1
)
,agent_response AS (
  SELECT 
    session_id
    ,position
    ,STRING_AGG(JSON_VALUE(response_text,'$'),' ' ORDER BY session_id, position, response_offset,response_text_offset) as agent_response
  FROM 
  (
    SELECT *
    FROM execution_sequence_parse
    WHERE ARRAY_LENGTH(responses) > 0
    QUALIFY ROW_NUMBER() OVER (PARTITION BY session_id, position ORDER BY step DESC) = 1
  ) as a
  INNER JOIN UNNEST(a.responses) as response with offset as response_offset
  INNER JOIN UNNEST(JSON_QUERY_ARRAY(response,'$.text.text')) as response_text with offset as response_text_offset
  GROUP BY 1,2
)
,alternative_matched_intents as (
  SELECT 
    session_id
    ,position
    ,ARRAY_AGG(
      STRUCT(
        JSON_VALUE(alternative_matched_intent,'$.DisplayName') as alternative_matched_intent
        ,SAFE_CAST(JSON_VALUE(alternative_matched_intent,'$.Score') as NUMERIC) as score
      ) ORDER BY SAFE_CAST(JSON_VALUE(alternative_matched_intent,'$.Score') as NUMERIC) DESC
    ) as alternative_matched_intents
  FROM base_data
    ,UNNEST(alternative_matched_intents) as alternative_matched_intent WITH offset as alternative_matched_intents_offset
  GROUP BY 1,2
)
SELECT 
  base_data.project_id
  ,base_data.location
  ,base_data.agent_id
  ,base_data.session_id
  ,session.session_start_time
  ,session.session_end_time
  ,base_data.response_id
  ,base_data.request_time
  ,base_data.position
  ,base_data.user_utterance
  ,base_data.optional_dtmf_digits
  ,agent_response.agent_response
  ,source_and_target_page.source_flow_id
  ,source_and_target_page.source_flow_display_name
  ,source_and_target_page.source_page_id
  ,source_and_target_page.source_page_display_name
  ,source_and_target_page.flow_id
  ,source_and_target_page.flow_display_name
  ,source_and_target_page.page_id
  ,source_and_target_page.page_display_name
  ,base_data.intent_display_id
  ,base_data.intent_display_name
  ,base_data.intent_confidence_score
  ,base_data.match_type
  ,base_data.event
  ,base_data.live_agent_handoff
  ,execution_sequence_agg.live_agent_escalation
  ,execution_sequence_agg.execution_sequence_count
  ,base_data.language_code
  ,base_data.session_parameters
  ,execution_sequence_agg.execution_sequence
  ,webhook_agg.webhooks
  ,alternative_matched_intents.alternative_matched_intents
FROM base_data
  LEFT JOIN execution_sequence_agg USING (session_id, position)
  LEFT JOIN webhook_agg USING (session_id, position)
  LEFT JOIN source_and_target_page USING (session_id, position)
  LEFT JOIN session USING (session_id)
  LEFT JOIN agent_response USING (session_id, position)
  LEFT JOIN alternative_matched_intents USING (session_id, position)
