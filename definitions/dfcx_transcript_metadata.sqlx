config {
    type: "incremental",
    bigquery: {
        partitionBy: "TIMESTAMP_TRUNC(session_start_time, HOUR)",
        requirePartitionFilter : true
    },
    description: "Additional Transcript Transformations",
}

WITH
dfcx_transcript AS (
  SELECT
      session_start_time,
      session_id,
      response_id,
      request_time,
      insert_time,
      CASE WHEN optional_dtmf_digits IS NOT NULL THEN IF (user_utterance LIKE 'dtmf%','(dtmf) ' || user_utterance,'(dtmf) ' || optional_dtmf_digits) ELSE user_utterance END AS consolidated_user_utterance,
      match_type,
      execution_sequence,
      actions,
      playbooks,
      source_flow_display_name,
      source_page_display_name,
      flow_display_name,
      page_display_name
  FROM ${ref("dfcx_transcript")} AS dfcx_transcript
  WHERE TRUE
    AND session_start_time >= session_start_time_checkpoint
),
ai_indicators AS (
SELECT
  session_id,
  response_id,
  MAX(contain_ai_generated_content) AS contain_ai_generated_content,
  MAX(contain_attempted_data_store_interactions) AS contain_attempted_data_store_interactions,
  MAX(contain_data_store_content) AS contain_data_store_content,
  MAX(contain_data_store_faq_content) AS contain_data_store_faq_content,
  MAX(contain_generators_content) AS contain_generators_content,
  MAX(contain_generative_fallback) AS contain_generative_fallback,
  FROM (
    SELECT
      dfcx_transcript.session_id,
      dfcx_transcript.response_id,
      response_offset,
      IF(JSON_VALUE(SAFE.PARSE_JSON(response),'$.text.containAiGeneratedContent')='true',TRUE,FALSE) AS contain_ai_generated_content,
      IF(JSON_VALUE(SAFE.PARSE_JSON(response),'$.text.containAttemptedDataStoreInteractions')='true',TRUE,FALSE) AS contain_attempted_data_store_interactions,
      IF(JSON_VALUE(SAFE.PARSE_JSON(response),'$.text.containDataStoreContent')='true',TRUE,FALSE) AS contain_data_store_content,
      IF(JSON_VALUE(SAFE.PARSE_JSON(response),'$.text.containDataStoreFaqContent')='true',TRUE,FALSE) AS contain_data_store_faq_content,
      IF(JSON_VALUE(SAFE.PARSE_JSON(response),'$.text.containGeneratorsContent')='true',TRUE,FALSE) AS contain_generators_content,
      IF(JSON_VALUE(SAFE.PARSE_JSON(response),'$.text.containGenerativeFallback')='true',TRUE,FALSE) AS contain_generative_fallback,
    FROM dfcx_transcript
      INNER JOIN UNNEST(execution_sequence)
      LEFT JOIN UNNEST(responses) AS response WITH OFFSET AS response_offset 
  )
GROUP BY 1,2 
),
business_logic as (
  SELECT
    dfcx_transcript.session_start_time,
    dfcx_transcript.session_id,
    dfcx_transcript.response_id,
    dfcx_transcript.request_time,
    dfcx_transcript.insert_time,
    dfcx_transcript.consolidated_user_utterance,
    COALESCE(ai_indicators.contain_ai_generated_content, FALSE) AS contain_ai_generated_content,
    COALESCE(ai_indicators.contain_attempted_data_store_interactions, FALSE) as contain_attempted_data_store_interactions,
    COALESCE(ai_indicators.contain_data_store_content, FALSE) as contain_data_store_content,
    COALESCE(ai_indicators.contain_data_store_faq_content, FALSE) AS contain_data_store_faq_content,
    COALESCE(ai_indicators.contain_generators_content, FALSE) AS contain_generators_content,
    COALESCE(ai_indicators.contain_generative_fallback, FALSE) AS contain_generative_fallback,  
    IF(dfcx_transcript.match_type='PLAYBOOK' OR 'toolUse' IN UNNEST(actions.action) OR 'playbookInvocation' IN UNNEST(actions.action) OR 'flowInvocation' IN UNNEST(actions.action),TRUE,FALSE) as contain_playbook,
    CASE
      WHEN LAG(dfcx_transcript.match_type,1) OVER (PARTITION BY dfcx_transcript.session_id ORDER BY dfcx_transcript.request_time ASC) = 'PLAYBOOK' THEN  'PLAYBOOK'
      WHEN dfcx_transcript.match_type = 'PLAYBOOK' THEN 'PLAYBOOK'
      ELSE dfcx_transcript.source_flow_display_name
      END as source_flow_display_name,
    CASE
      WHEN LAG(dfcx_transcript.match_type,1) OVER (PARTITION BY dfcx_transcript.session_id ORDER BY dfcx_transcript.request_time ASC) = 'PLAYBOOK' THEN  LAG(ARRAY_REVERSE(dfcx_transcript.playbooks)[SAFE_OFFSET(0)].playbook_name,1) OVER (PARTITION BY dfcx_transcript.session_id ORDER BY dfcx_transcript.request_time ASC)
      WHEN dfcx_transcript.match_type = 'PLAYBOOK' THEN dfcx_transcript.playbooks[SAFE_OFFSET(0)].playbook_name
      ELSE dfcx_transcript.source_page_display_name
      END as source_page_display_name,
    CASE
      WHEN dfcx_transcript.match_type = 'PLAYBOOK' THEN 'PLAYBOOK'
      ELSE dfcx_transcript.flow_display_name
      END as flow_display_name,
    CASE
      WHEN dfcx_transcript.match_type = 'PLAYBOOK' THEN ARRAY_REVERSE(dfcx_transcript.playbooks)[SAFE_OFFSET(0)].playbook_name
      ELSE dfcx_transcript.page_display_name
      END as page_display_name,
  FROM dfcx_transcript
  LEFT JOIN ai_indicators
    ON dfcx_transcript.session_id = ai_indicators.session_id
    AND dfcx_transcript.response_id = ai_indicators.response_id
)
SELECT *
FROM business_logic
WHERE TRUE
  AND insert_time > insert_time_checkpoint

pre_operations {
  DECLARE
    insert_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MAX(insert_time),CURRENT_TIMESTAMP()) FROM ${self()} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR)`,
            `SELECT TIMESTAMP(${dataform.projectConfig.vars.backfillDate})`)
    }
    );
  DECLARE 
    session_start_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MIN(session_start_time),CURRENT_TIMESTAMP()) FROM ${ref("dfcx_transcript")} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 36 HOUR) AND insert_time > insert_time_checkpoint`,
            `SELECT TIMESTAMP(${dataform.projectConfig.vars.backfillDate})`)
    }
    )
}
