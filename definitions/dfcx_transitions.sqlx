config {
    type: "incremental",
    bigquery: {
        partitionBy: "TIMESTAMP_TRUNC(session_start_time, HOUR)",
        updatePartitionFilter: "session_start_time >= timestamp_sub(session_start_time_checkpoint, interval 1 hour)",
        requirePartitionFilter : true
    },
    uniqueKey: ["session_id", "response_id"],
    description: "DFCX transition information",
}

WITH
  webhook_failures AS (
  SELECT
    session_id,
    position,
    MAX(CASE
        WHEN webhook_status <> 'OK' THEN TRUE
      ELSE
      FALSE
    END
      ) AS has_webhook_failure
  FROM
    ${ref("dfcx_transcript")} as dfcx_transcript,
    UNNEST(webhooks) AS webhook
  WHERE TRUE
    AND dfcx_transcript.session_start_time >= session_start_time_checkpoint
  GROUP BY
    1,
    2 ),
  last_turns AS (
  SELECT
    session_id,
    MAX(position) AS last_position
  FROM
    ${ref("dfcx_transcript")} AS turns
  WHERE TRUE
    AND turns.session_start_time >= session_start_time_checkpoint
  GROUP BY
    session_id ),
  transitions AS (
  SELECT
    turns.project_id,
    turns.session_start_time,
    turns.location,
    turns.agent_id,
    turns.session_id,
    interaction.interaction_head_intent,
    turns.source_flow_id AS flow_id_before,
    turns.flow_id AS flow_id_after,
    turns.source_page_display_name AS page_before,
    (
      CASE
        WHEN (turns.page_display_name = 'End Session' AND heuristic_outcome.heuristic_outcome = 'ESCALATED' AND turns.position = last_turns.last_position) THEN 'End Session (Escalated)'
      ELSE
      turns.page_display_name
    END
      ) AS page_after,
    LAG(turns.position) OVER (PARTITION BY turns.session_id ORDER BY turns.position) AS position_before,
    turns.position AS position_after,
    LAG(turns.agent_response) OVER (PARTITION BY turns.session_id ORDER BY turns.position) AS agent_response_before,
    turns.agent_response AS agent_response_after,
    transcript.consolidated_user_utterance AS user_utterance,
    turns.match_type,
    (
      CASE
        WHEN TRIM(turns.intent_display_name) != '' THEN turns.intent_display_name
      ELSE
      CAST(turns.match_type AS STRING)
    END
      ) AS matched_intent,
    turns.intent_confidence_score AS confidence,
    heuristic_outcome.heuristic_outcome AS outcome,
    (heuristic_outcome.heuristic_outcome = 'ESCALATED') AS is_escalated,
    (turns.intent_display_name LIKE '%req_agent%') AS has_req_agent,
    (turns.intent_display_name LIKE '%req_agent%'
      AND turns.page_display_name = 'End Session') AS has_req_agent_plus_escalation,
    webhook_failures.has_webhook_failure,
    (turns.match_type = 'NO_MATCH') AS has_no_match,
    (turns.match_type = 'NO_INPUT') AS has_no_input,
    turns.language_code,
    turns.source_flow_display_name AS flow_before,
    turns.flow_display_name AS flow_after,
    turns.insert_time
  FROM
    ${ref("dfcx_transcript")} AS turns
  LEFT JOIN
    webhook_failures
  ON
    turns.session_id = webhook_failures.session_id
    AND turns.position = webhook_failures.position
  INNER JOIN
    ${ref("dfcx_session_metadata")} AS conversation
  ON
    turns.session_id = conversation.session_id
  INNER JOIN
    ${ref("dfcx_interaction")} AS interaction
  ON
    turns.position BETWEEN interaction.start_interaction_position
    AND interaction.end_interaction_position
    AND turns.session_id = interaction.session_id
  INNER JOIN
    last_turns
  ON
    turns.session_id = last_turns.session_id
  INNER JOIN
    ${ref("dfcx_session_heuristic_outcome")} AS heuristic_outcome
  ON
    turns.session_id = heuristic_outcome.session_id
  INNER JOIN
    ${ref("dfcx_transcript_metadata")} AS transcript
  ON
    turns.session_id = transcript.session_id
    AND turns.response_id = transcript.response_id
  WHERE
    TRUE 
    AND turns.session_start_time >= session_start_time_checkpoint
    AND conversation.session_start_time >= session_start_time_checkpoint
    AND interaction.session_start_time >= session_start_time_checkpoint
    AND heuristic_outcome.session_start_time >= session_start_time_checkpoint
    AND transcript.session_start_time >= session_start_time_checkpoint
)
SELECT
  transitions.session_start_time,
  transitions.project_id,
  transitions.location,
  transitions.agent_id,
  transitions.session_id,
  transitions.interaction_head_intent,
  transitions.flow_before,
  transitions.flow_after,
  transitions.page_before,
  transitions.page_after,
  transitions.position_before,
  transitions.position_after,
  transitions.agent_response_before,
  transitions.agent_response_after,
  transitions.user_utterance,
  transitions.match_type,
  transitions.matched_intent,
  transitions.confidence,
  transitions.outcome,
  transitions.is_escalated,
  transitions.has_req_agent,
  transitions.has_req_agent_plus_escalation,
  transitions.has_webhook_failure,
  transitions.has_no_match,
  transitions.has_no_input,
  transitions.language_code,
  transitions.insert_time
FROM
  transitions
WHERE TRUE
  AND position_before is not null

pre_operations {
  DECLARE
    insert_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MAX(insert_time),CURRENT_TIMESTAMP()) FROM ${self()} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR)`,
            `SELECT TIMESTAMP(${dataform.projectConfig.vars.backfillDate})`)
    }
    );
  DECLARE 
    session_start_time_checkpoint DEFAULT (
    ${
        when(incremental(),
            `SELECT COALESCE(MIN(session_start_time),CURRENT_TIMESTAMP()) FROM ${ref("dfcx_transcript")} WHERE session_start_time >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 36 HOUR) AND insert_time > insert_time_checkpoint`,
            `SELECT TIMESTAMP(${dataform.projectConfig.vars.backfillDate})`)
    }
    )
}